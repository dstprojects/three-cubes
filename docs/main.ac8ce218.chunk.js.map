{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["softShadows","SpinningMesh","position","args","color","speed","mesh","useRef","useFrame","current","rotation","x","y","useState","expand","setExpand","props","useSpring","scale","onClick","castShadow","ref","attach","MeshWobbleMaterial","factor","App","shadows","camera","fov","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","receiveShadow","Math","PI","opacity","OrbitControls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAWAA,cAEA,IAAMC,EAAe,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,SAAWC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAExCC,EAAOC,iBAAO,MAEpBC,aAAS,kBAAQF,EAAKG,QAAQC,SAASC,EAAIL,EAAKG,QAAQC,SAASE,GAAK,OAJZ,MAM9BC,oBAAS,GANqB,mBAMnDC,EANmD,KAM3CC,EAN2C,KAQpDC,EAAQC,oBAAU,CACtBC,MAAOJ,EAAS,CAAC,IAAK,IAAK,KAAO,CAAC,EAAE,EAAE,KAGzC,OACE,eAAC,IAAER,KAAH,CAAQa,QAAS,kBAAMJ,GAAWD,IAASI,MAAOF,EAAME,MAAOE,YAAU,EAAClB,SAAUA,EAAUmB,IAAKf,EAAnG,UACE,mCAAmBgB,OAAO,WAAWnB,KAAMA,IAC3C,cAACoB,EAAA,EAAD,CAAoBD,OAAO,WAAWlB,MAAOA,EAAOC,MAAOA,EAAOmB,OAAQ,SA8CjEC,MAzCf,WAEE,OACE,mCACE,eAAC,IAAD,CACEC,SAAO,EACPC,OAAQ,CAACzB,SAAU,EAAE,EAAG,EAAG,IAAK0B,IAAK,IAFvC,UAKE,kCACER,YAAU,EACVlB,SAAU,CAAC,EAAG,GAAI,GAClB2B,UAAW,IACXC,uBAAsB,KACtBC,wBAAuB,KACvBC,oBAAmB,GACnBC,sBAAqB,GACrBC,sBAAqB,GACrBC,oBAAmB,GACnBC,wBAAuB,KAEzB,8BAAcP,UAAW,KACzB,4BAAY3B,SAAU,EAAE,GAAI,GAAI,IAAK2B,UAAW,KAChD,4BAAY3B,SAAU,CAAC,GAAI,GAAI,GAAI2B,UAAW,MAE9C,kCACE,uBAAMQ,eAAa,EAAC3B,SAAU,EAAE4B,KAAKC,GAAI,EAAG,EAAE,GAAIrC,SAAU,CAAC,GAAI,EAAG,GAApE,UACE,qCAAqBoB,OAAO,WAAWnB,KAAM,CAAC,IAAI,OAClD,gCAAgBmB,OAAO,WAAWkB,QAAS,QAE7C,cAAC,EAAD,CAActC,SAAU,CAAC,EAAE,EAAE,GAAIC,KAAM,CAAC,EAAE,EAAE,GAAIC,MAAM,YAAYC,MAAO,IACzE,cAAC,EAAD,CAAcH,SAAU,EAAE,EAAE,GAAG,GAAIE,MAAM,OAAOC,MAAO,IACvD,cAAC,EAAD,CAAcH,SAAU,CAAC,EAAE,GAAG,GAAKE,MAAM,OAAOC,MAAO,OAGzD,cAACoC,EAAA,EAAD,UCxDOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ac8ce218.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react'\nimport './App.scss';\n\n// Import canvas from react three fiber\n// Useframe sirve como la funcion de tick para las animaciones\nimport { Canvas, useFrame } from '@react-three/fiber'\n\nimport { softShadows, MeshWobbleMaterial, OrbitControls } from '@react-three/drei';\n\nimport { useSpring, a} from '@react-spring/three'\n\nsoftShadows()\n\nconst SpinningMesh = ({ position , args, color, speed }) => {\n\n  const mesh = useRef(null)\n\n  useFrame(() => ( mesh.current.rotation.x = mesh.current.rotation.y += 0.01 ));\n\n  const [expand, setExpand] = useState(false);\n\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1,1,1]\n  })\n\n  return(\n    <a.mesh onClick={() => setExpand(!expand)} scale={props.scale} castShadow position={position} ref={mesh}>\n      <boxBufferGeometry attach='geometry' args={args} />\n      <MeshWobbleMaterial attach='material' color={color} speed={speed} factor={0.6} />\n    </a.mesh>\n  )\n}\n\nfunction App() {\n\n  return (\n    <>\n      <Canvas \n        shadows\n        camera={{position: [-5, 2, 10], fov: 60 }}\n      >\n\n        <directionalLight \n          castShadow\n          position={[0, 10, 0]}\n          intensity={1.5}\n          shadow-mapSize-width={1024}\n          shadow-mapSize-height={1024}\n          shadow-camera-far={50}\n          shadow-camera-left={-10}\n          shadow-camera-right={10}\n          shadow-camera-top={10}\n          shadow-camera-bottom={-10}\n        />\n        <ambientLight intensity={0.3} />\n        <pointLight position={[-10, 0, -20]} intensity={0.5} />\n        <pointLight position={[0, -10, 0]} intensity={1.5} />\n\n        <group>\n          <mesh receiveShadow rotation={[-Math.PI /2, 0,0]} position={[0, -3, 0]} >\n            <planeBufferGeometry attach='geometry' args={[100,100]} />\n            <shadowMaterial attach='material' opacity={0.3} />\n          </mesh>\n          <SpinningMesh position={[0,1,0]} args={[3,2,1]} color=\"lightBlue\" speed={2} />\n          <SpinningMesh position={[-2,1,-5]} color=\"pink\" speed={6} />\n          <SpinningMesh position={[5,1,-2]}  color=\"pink\" speed={6} />\n        </group>\n\n        <OrbitControls />\n      </Canvas>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}