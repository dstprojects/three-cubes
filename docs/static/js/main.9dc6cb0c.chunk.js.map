{"version":3,"sources":["tools/Stats.js","App.js","reportWebVitals.js","index.js"],"names":["Stats","useState","StatsImpl","stats","useEffect","showPanel","document","body","appendChild","dom","removeChild","useFrame","state","begin","gl","render","scene","camera","end","softShadows","SpinningMesh","position","args","color","speed","mesh","useRef","current","rotation","x","y","expand","setExpand","props","useSpring","scale","onClick","e","stopPropagation","castShadow","ref","attach","MeshWobbleMaterial","factor","CubesScene","moveCamera","setMoveCamera","THREE","lookAt","receiveShadow","Math","PI","opacity","App","shadows","fov","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","OrbitControls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9dc6cb0c.chunk.js","sourcesContent":["import { \n    useFrame\n  } from '@react-three/fiber'\nimport { useState, useEffect } from 'react'\nimport StatsImpl from \"stats.js\"\n\nexport const Stats = () => {\n    const [stats] = useState(() => new StatsImpl())\n    useEffect(() => {\n      stats.showPanel(0)\n      document.body.appendChild(stats.dom)\n      return () => document.body.removeChild(stats.dom)\n    }, [stats])\n    return useFrame(state => {\n      stats.begin()\n      state.gl.render(state.scene, state.camera)\n      stats.end()\n    }, 1)\n}\n","import * as THREE from 'three'\nimport React, { useRef, useState } from 'react'\nimport './App.scss';\n\n// Import canvas from react three fiber\n// Useframe sirve como la funcion de tick para las animaciones\nimport { Canvas, useFrame, useThree } from '@react-three/fiber'\n\nimport { softShadows, MeshWobbleMaterial, OrbitControls } from '@react-three/drei';\n\nimport { useSpring, a} from '@react-spring/three'\nimport { Stats } from './tools/Stats';\n\nsoftShadows()\n\nconst SpinningMesh = ({ position , args, color, speed }) => {\n\n  const mesh = useRef(null)\n\n  useFrame(() => ( mesh.current.rotation.x = mesh.current.rotation.y += 0.01 ));\n\n\n  const [expand, setExpand] = useState(false);\n\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1,1,1]\n  })\n\n  return(\n    <a.mesh onClick={(e) => { e.stopPropagation(); setExpand(!expand)}} scale={props.scale} castShadow position={position} ref={mesh}>\n      <boxBufferGeometry attach='geometry' args={args} />\n      <MeshWobbleMaterial attach='material' color={color} speed={speed} factor={0.6} />\n    </a.mesh>\n  )\n}\n\nconst CubesScene = () => {\n\n  const [moveCamera, setMoveCamera] = useState(false)\n\n  const vec = new THREE.Vector3()\n\n  useFrame((state) => {\n    const step = 0.05\n    // state.camera.position.lerp(vec.set( moveCamera ? 12 : -5, moveCamera ? 10 : 2, 10), step)\n    state.camera.lookAt(0,10,0)\n    \n  })\n\n  return(\n    <group>\n      <mesh receiveShadow rotation={[-Math.PI /2, 0,0]} position={[0, -3, 0]} onClick={() => {setMoveCamera(!moveCamera)}} >\n        <planeBufferGeometry attach='geometry' args={[100,100]} />\n        <shadowMaterial attach='material' opacity={0.3} />\n      </mesh>\n      <SpinningMesh position={[0,1,0]} args={[3,2,1]} color=\"lightBlue\" speed={2} />\n      <SpinningMesh position={[-2,1,-5]} color=\"pink\" speed={6} />\n      <SpinningMesh position={[5,1,-2]}  color=\"pink\" speed={6} />\n    </group>\n  )\n}\n\nfunction Rig() {\n  const { camera, mouse } = useThree()\n  const vec = new THREE.Vector3()\n  return useFrame(() => {\n    camera.position.lerp(vec.set(mouse.x * 5, mouse.y * 5, camera.position.z), 0.02)\n  })\n}\n\nfunction App() {\n\n  return (\n    <>\n      <Canvas \n        shadows\n        camera={{position: [-5, 2, 10], fov: 60}}\n      >\n\n        <directionalLight \n          castShadow\n          position={[0, 10, 0]}\n          intensity={1.5}\n          shadow-mapSize-width={1024}\n          shadow-mapSize-height={1024}\n          shadow-camera-far={50}\n          shadow-camera-left={-10}\n          shadow-camera-right={10}\n          shadow-camera-top={10}\n          shadow-camera-bottom={-10}\n        />\n        <ambientLight intensity={0.3} />\n        <pointLight position={[-10, 0, -20]} intensity={0.5} />\n        <pointLight position={[0, -10, 0]} intensity={1.5} />\n\n        <CubesScene />\n        {/* <Rig /> */}\n        <OrbitControls />\n        <Stats/>\n      </Canvas>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}